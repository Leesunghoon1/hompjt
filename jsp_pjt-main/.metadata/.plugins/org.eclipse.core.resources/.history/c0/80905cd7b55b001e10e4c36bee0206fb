package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnailator;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//로그기록 객체 생성
	private static final Logger log = 
			LoggerFactory.getLogger(BoardController.class);
	// jsp에서 받은 요청을 처리, 결과를 다른 jsp로 보내는 역할을 하는 객체
	private RequestDispatcher rdp;
	private String destPage; //목적지 주소 기록 변수
	private int isOK; //DB의 구문 체크 값 저장
	//controller <-> service, service <-> dao
	private BoardService bsv; //아직 미구현 상태 (service => interface로 생성)
	private String savePath; //파일 경로를 저장할 변수
       
    public BoardController() {
        bsv = new BoardServiceImpl();// bsv를 구현할 객체 생성(service=>class로 생성)
    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 모든 처리가 이루어지는 부분
		//각 객체의 인코딩 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri = request.getRequestURI(); //jsp에서 오는 요청 주소
		log.info("uri >>>>>> "+uri); // /brd/register
		System.out.println("uri >>>>>> "+uri);
		//register
		String path = uri.substring(uri.lastIndexOf("/")+1);
		System.out.println("실 요청 경로 >>>> "+path);
		
		switch(path) {
		case "register":
			//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
			//목적지 주소 설정
			destPage = "/board/register.jsp";
			System.out.println("이동완료~!!");
			break;
					
//				case "list" :
//					try {
//						log.info("리스트 첫번째 1");
//						List<BoardVO>list = bsv.getList();
//						//bsv객체를 list로 계속 넣겠다
//						log.info(list.get(0).toString());
//						// 가져온 List에 첫 값을 출력
//						request.setAttribute("list", list);
//						//ㅣlist를 화면으로 보내기 request 객체에 실어 보내기
//						destPage = "/board/list.jsp";
//					} catch (Exception e) {
//						log.info("데이터베이스 문제.");
//						e.printStackTrace();
//					}
//					break;
					
				case "pageList" :
					try {
						//jsp에 파라미터 받기
						PagingVO pgvo = new PagingVO(); //1, 5
						if(request.getParameter("pageNo") != null) {
							//만약에 가져온 페이지네이션 번호가 널이 아니면
							int pageNo = Integer.parseInt(request.getParameter("pageNo"));
							//페이지네이션 값을 pageNo 객체에 넣겠다
							int qty = Integer.parseInt(request.getParameter("qty"));
							//게시글수 값을 qty에 넣겠다.
							log.info("pagingno"+pageNo+"qty"+qty);
						//검색어 받기
						String type = request.getParameter("type");
						String keyword = request.getParameter("ketword");
						// 타입, 키워드 가져오기
						pgvo.setType(type);
						pgvo.setKeyword(keyword);
						//jsp에서 가져오면 저장해서 mapper로 가져가서 검색해서 가져오게끔 만들어주는 set 
						log.info("type : " + pgvo.getType() + "keyword : " + pgvo.getKeyword());
						//pagingVO, totalCount
						int totalCount = bsv.getTotalCount(pgvo);   
						//DB에서 전체 카운트 요청
						log.info("전체 게시글 수 " + totalCount);
						// bsv pgvo 주고, limit 적용한 리스트 10개 가져오기
						List<BoardVO> list = bsv.getPageList(pgvo);
						request.setAttribute("list", list);
						//페이지 정보를 list.jsp로 보내기
						PagingHandler ph = new PagingHandler(pgvo, totalCount);
						request.setAttribute("ph", ph);
						log.info("paging 성공~");
						destPage = "/board/pageList.jsp";
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
					break;
					
				case "detail" :
					try {
						//jsp 에서 보낸 bno 받기
						int bno = Integer.parseInt(request.getParameter("bno"));
						log.info("디테일 관문 1");
						BoardVO bvo = bsv.getDetail(bno);
						 //서비스에게 요청
						log.info("디테일 관문 4");
						log.info("bvo >>"+bvo);
						request.setAttribute("bvo", bvo);
						//jsp에 request에 객체에 실어 보내기
						destPage = "/board/detail.jsp";
						
					} catch (Exception e) {
						log.info("디테일 데이터베이스 오류");
						e.printStackTrace();
					}
					break;
					
				case "modify" :
					try {
						int bno = Integer.parseInt(request.getParameter("bno"));
						log.info("수정 1");
						BoardVO bvo = bsv.getDetail(bno);
						//디테일 을 수정하기 위해 디테일 값 전달
						log.info("수정 2");
						request.setAttribute("bvo", bvo);
						destPage = "/board/modify.jsp";
					} catch (Exception e) {
						log.info("수정db 오류");
						e.printStackTrace();
					}
					break;
					
				case "edit" :
					try {
						int bno = Integer.parseInt(request.getParameter("bno"));
						String title = request.getParameter("title");
						String content = request.getParameter("content");
						BoardVO bvo = new BoardVO(bno, title, content);
						//디테일 을 수정하기 위해 디테일 값 전달
						log.info("edit 1");
						log.info("bvo" + bvo);
						isOK = bsv.modify(bvo);
						log.info((isOK > 0)? "ok" : "fail");
						destPage = "detail?bno="+bno;
						//한개의 페이지의 디테일로 들어가려면 bno 딸려들어가야함
					} catch (Exception e) {
						log.info("edit 오류");
						e.printStackTrace();
					}
					break;
				case "remove" :
					try {
						int bno = Integer.parseInt(request.getParameter("bno"));
						isOK = bsv.remove(bno);
						log.info("remove 1");
						log.info((isOK > 0)? "ok" : "fail");
						destPage = "/brd/pageList";
					} catch (Exception e) {
						e.printStackTrace();
					}
					break;
					
					
				}
				
				
				//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
				rdp = request.getRequestDispatcher(destPage);
				rdp.forward(request, response); //요청에 필요한 객체를 가지고, 경로로 이동.
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
